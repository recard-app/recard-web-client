@use '../../../styling/variables' as *;

.toggle-bar {
  display: inline-flex;
  align-items: center;
  gap: $space-2;
  
  // Candy bar styling - connected buttons
  &.connected {
    gap: 0;
    border-radius: $radius-md;
    overflow: hidden;
    
    .toggle-bar-button {
      border-radius: 0;
      border-right: none;
      
      &:first-child {
        border-top-left-radius: $radius-md;
        border-bottom-left-radius: $radius-md;
      }
      
      &:last-child {
        border-top-right-radius: $radius-md;
        border-bottom-right-radius: $radius-md;
        border-right: $border-full solid $neutral-light-gray;
      }
      
      // Override active state border for seamless appearance
      &.active,
      &[data-pressed='true'] {
        border-color: $primary-medium;
        border-right-color: $primary-medium;
        z-index: 1;
        position: relative;
        
        &:not(:last-child) {
          border-right: $border-full solid $primary-medium;
        }
      }
    }
  }
}

.toggle-bar-button {
  display: inline-flex;
  align-items: center;
  gap: $space-1;
  padding: $space-1 $space-2;
  font-size: $font-xs;
  font-weight: $font-semibold;
  border-radius: $radius-md;
  border: $border-full solid $neutral-light-gray;
  color: $neutral-dark-gray;
  background-color: $neutral-white;
  cursor: pointer;

  &.mini {
    padding: $space-half $space-1;
    font-size: $font-xxs;
  }
  &.small {
    padding: $space-1 $space-2;
    font-size: $font-xs;
  }

  // Off state
  &[data-pressed='false'] {
    opacity: 0.8;
  }

  // On state
  &.active,
  &[data-pressed='true'] {
    border-color: $primary-medium;
    background-color: $primary-lightest;
    color: $primary-dark;
  }

  // Icon-only sizing support; when only an svg exists inside
  &:has(svg):not(:has(span)) {
    padding-left: $space-1;
    padding-right: $space-1;
  }
}


