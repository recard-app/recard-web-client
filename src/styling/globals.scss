@forward './variables';
@forward './mixins';

// Import variables and mixins for use in this file
@use './variables' as *;
@use './mixins' as *;

// Reset some basic elements
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  font-family: $font-inter;
  font-size: $font-base;
  line-height: $leading-normal;
  color: $neutral-black;
  background-color: $neutral-light-gray;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-optical-sizing: auto;
}

// Dynamic background color classes for different pages
body.bg-white {
  background-color: $neutral-white;
}

body.bg-light {
  background-color: $neutral-light-gray;
}

body.bg-dark {
  background-color: $neutral-dark-gray;
}

body.bg-primary {
  background-color: $primary-lightest;
}

// Typography
h1 {
  @include heading-1;
}

h2 {
  @include heading-2;
}

h3 {
  @include heading-3;
}

h4 {
  @include heading-4;
}

h5 {
  @include heading-5;
}

h6 {
  @include heading-6;
}

// Mobile-only typography adjustments for headings
@media (max-width: $mobile-breakpoint) {
  // Scale down higher headers the most; only adjust font-size
  h1 {
    font-size: 2rem; // down from 3rem
  }

  h2 {
    font-size: 1.5rem; // down from 2rem
  }

  h3 {
    font-size: $font-h4; // 1.3rem (down from 1.4rem)
  }

  h4 {
    font-size: $font-h5; // 1.2rem (down from 1.3rem)
  }

  h5 {
    font-size: $font-h6; // 1.125rem (down from 1.2rem)
  }

  h6 {
    font-size: $font-base; // 1rem (down from 1.125rem)
  }
}

// Body text defaults
p {
  @include body-regular;
  margin-bottom: $space-4;
}

// Form elements
input, textarea, select {
  @include input-field;
  margin-bottom: $space-4;
  // Prevent iOS Safari/Chrome auto-zoom by ensuring minimum 16px font size
  font-size: $font-base;
}

// Default input styling classes
.default-input {
  @include default-input;
}

.default-textarea {
  @include default-textarea;
}

.default-select {
  @include default-select;
}

label {
  @include form-label;
}

// Links
a, .link {
  @include link-text;
  
  &.subtle {
    @include link-subtle;
  }
  
  &.external {
    @include link-external;
  }
}

// Buttons
button, .button {
  @include button-primary;
  
  &.secondary {
    @include button-secondary;
  }
  
  &.outline {
    @include button-outline;
  }

  &.ghost {
    @include button-ghost;
  }

  // Ghost + destructive (red border/text, transparent bg)
  &.ghost.destructive,
  &.destructive.ghost {
    @include button-ghost-destructive;
  }

  &.no-outline {
    @include button-no-outline;
  }

  &.destructive {
    @include button-destructive;
  }

  &.loading {
    @include button-loading;
  }

  &.disabled {
    @include button-disabled;
  }

  &.mini {
    @include button-mini;
  }
  
  &.small {
    @include button-small;
  }
  
  &.large {
    @include button-large;
  }
  
  &.icon {
    @include button-icon-only;
    
    &.with-text {
      @include button-icon-with-text;
    }
    
    // Size combinations for icon-only buttons
    &.mini {
      @include button-icon-only($icon-micro, $space-1, $space-1);
      
      &.with-text {
        @include button-icon-with-text($icon-micro, $space-1, $space-2);
      }
    }
    
    &.small {
      @include button-icon-only($icon-mini, $space-2, $space-2);
      
      &.with-text {
        @include button-icon-with-text($icon-mini, $space-2, $space-2);
      }
    }
    
    &.large {
      @include button-icon-only($icon-small, $space-4, $space-4);
      
      &.with-text {
        @include button-icon-with-text($icon-small, $space-4, $space-8);
      }
    }

    // Force equal left/right padding to match top/bottom padding for sized icon buttons
    &.square {
      // Normal (default) size
      padding: $space-2;
    }
    &.mini.square {
      padding: $space-1;
    }
    &.small.square {
      padding: $space-2;
    }
    &.large.square {
      padding: $space-4;
    }
  }

  // Ensure ghost destructive icon buttons keep a red border even with icon-only base
  &.ghost.destructive.icon {
    border: $border-half solid $error;
  }
}

// Icon utility classes
.icon-gray-hover {
  &:hover {
    svg {
      color: $neutral-dark-gray !important;
      stroke: $neutral-dark-gray !important;
    }
  }
}
.icon-gray-hover-fill {
  &:hover {
    svg {
      color: $neutral-dark-gray !important;
      fill: $neutral-dark-gray !important;
    }
  }
}

// Text utility classes
.caps-label {
  font-size: $font-xs;
  font-weight: $font-semibold;
  text-transform: uppercase;
  color: $neutral-dark-gray;
  font-family: $font-inter;
  margin: 0;
}

// Card bubble display used across components (e.g., history entries, credit entries)
.card-bubble-display {
  display: flex;
  align-items: center;
  gap: $space-1;
  margin: 0;
  font-size: $font-xs;
  color: $neutral-dark-gray;
  font-weight: $font-regular;
  width: fit-content;
  align-self: flex-start;
  padding: $space-half $space-2;
  border-radius: $radius-full;
  border: $border-half solid $neutral-light-gray;

  .card-thumbnail {
    width: auto;
    height: $icon-micro;
    flex-shrink: 0;
  }
}

// Credit slider color variables driven by SCSS design tokens
:root {
  // Base palette mapped from SCSS vars so you can change colors in variables.scss
  --credit-bar-untracked: #{$neutral-gray};
  --credit-bar-inactive: #{$neutral-medium-gray};
  --credit-bar-unused: #{$neutral-dark-gray};
  --credit-bar-partial: #{$primary-color};
  --credit-bar-used: #{$primary-medium};

  // Slider-specific aliases, so components can target stable names
  --slider-range-color-used: var(--credit-bar-used);
  --slider-range-color-partial: var(--credit-bar-partial);
  --slider-range-color-unused: var(--credit-bar-unused);
  --slider-range-color-inactive: var(--credit-bar-inactive);
}